package com.iv1201.applicantwebapp.applicantwebapp.service;

import com.iv1201.applicantwebapp.applicantwebapp.model.*;
import com.iv1201.applicantwebapp.applicantwebapp.repository.ClientRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;

import java.util.*;

/**
 * The class handles the API calls to and from the server.
 * The service provides the requested data, as well as sends
 * given data to the server.
 */
@Service
public class APIService {
    private RestTemplate loginTemplate;
    private final ClientRepository clientRepository;

/*
   @Value("${back-end.dev-local.api.login.url}")
    private String loginURL;
    @Value("${back-end.dev-local.api.register.url}")
    private String registerURL;
    @Value("${back-end.dev-local.api.user.url}")
    private String userURL;
    @Value("${back-end.dev-local.api.competence.url}")
    private String competenceURL;
    @Value("${back-end.dev-local.api.application.url}")
    private String applicationURL;
    @Value("${back-end.dev-local.api.new-password.url}")
    private String newPasswordURL;
    @Value("${back-end.dev-local.api.validate-password-token.url}")
    private String validatePasswordTokenURL;
    @Value("${back-end.dev-local.api.update-password-token.url}")
    private String updatePasswordTokenURL;
*/
    @Value("${back-end.dev-heroku.api.login.url}")
    private String loginURL;
    @Value("${back-end.dev-heroku.api.register.url}")
    private String registerURL;
    @Value("${back-end.dev-heroku.api.user.url}")
    private String userURL;
    @Value("${back-end.dev-heroku.api.competence.url}")
    private String competenceURL;
    @Value("${back-end.dev-heroku.api.application.url}")
    private String applicationURL;
    @Value("${back-end.dev-heroku.api.new-password.url}")
    private String newPasswordURL;
    @Value("${back-end.dev-heroku.api.validate-password-token.url}")
    private String validatePasswordTokenURL;
    @Value("${back-end.dev-heroku.api.update-password-token.url}")
    private String updatePasswordTokenURL;


    @Autowired
    public APIService(RestTemplateBuilder restTemplateBuilder, ClientRepository clientRepository) {
        loginTemplate = restTemplateBuilder
                .build();
        this.clientRepository = clientRepository;
    }

    /**
     * Service method to authenticate against the back-end API
     * On success : Returns a session id that maps to the jwt token that is generated by the back-end server
     * On failure : Throws HttpClientErrorException that is handled in Exception handling controller
     * */
    public String usernamePasswordAuthentication(String username, String password){
        String url = loginURL;
        LoginRequest loginRequest = new LoginRequest();
        loginRequest.username = username;
        loginRequest.password = password;
        ResponseEntity<Map>response;

        response = loginTemplate.postForEntity(url,loginRequest,Map.class);

        if(response.getStatusCodeValue() != 200)
        {
            throw new HttpClientErrorException(response.getStatusCode());
        }
        JwtToken jwtToken = JwtToken.builder()
                .token((String) response.getBody().get("token"))
                .type((String) response.getBody().get("type"))
                .build();
        String key = UUID.randomUUID().toString();
        clientRepository.save(key,new ClientTemplate(jwtToken));
        return key;
    }

    /**
     * Service method to get user by userToken from back-end
     * On success : Returns the applicant found
     * If user doesn't exist : Throws HttpClientErrorException that is handled in Exception handling controller
     * On failure : TODO throw exception if getForObject fails?
     * */
    public Applicant fetchUser(String clientId){
        String url = userURL;
        if(!clientRepository.exists(clientId)){
            throw new HttpClientErrorException(HttpStatus.FORBIDDEN);
        } else {
            ClientTemplate clientTemplate = clientRepository.find(clientId);
            Applicant applicant = clientTemplate.getTemplate().getForObject(url, Applicant.class);
            return applicant;
        }
    }

    /**
     * Service method to register a user to back-end by a register request built in the controller
     * On success : Returns the applicant found
     * On failure : Throws HttpClientErrorException that is handled in Exception handling controller
     * */
    public void registerUser(RegisterRequest registerRequest){
        String url = registerURL;
        ResponseEntity<Map>response = loginTemplate.postForEntity(url,registerRequest,Map.class);
        if(response.getStatusCodeValue() != 200)
        {
            throw new HttpClientErrorException(response.getStatusCode());
        }
    }

    /**
     * Service method to get predefined competences from back-end (database)
     * On success : Returns the applicant found
     * If user doesn't exist : Throws HttpClientErrorException that is handled in Exception handling controller
     * On failure : TODO throw exception if getForObject fails? check assert
     * */
    public List<Competence> getPredefinedCompetences(String clientId){
        String url = competenceURL;
        if(!clientRepository.exists(clientId)){
            throw new HttpClientErrorException(HttpStatus.FORBIDDEN);
        } else {
            ClientTemplate clientTemplate = clientRepository.find(clientId);
            Competence[] competences = clientTemplate.getTemplate().getForObject(url, Competence[].class);
            assert competences != null;
            return Arrays.asList(competences);
        }
    }

    /**
     * Service method to register an application to back-end
     * On failure : Throws HttpClientErrorException that is handled in Exception handling controller
     * */
    public void applicationRegistration(Application application, String clientId){
        String url = applicationURL;
        if(!clientRepository.exists(clientId)){
            throw new HttpClientErrorException(HttpStatus.FORBIDDEN);
        } else {

            ClientTemplate clientTemplate = clientRepository.find(clientId);
            ResponseEntity<Map>response = clientTemplate.getTemplate().postForEntity(url, application,Map.class);

            if(response.getStatusCodeValue() != 200)
            {
                throw new HttpClientErrorException(response.getStatusCode());
            }
        }

    }


    /**
     * Request new password.
     * @param passwordRequest Contains email and social security number to be checked in backend.
     */
    public void getNewPassword(NewPasswordRequest passwordRequest){
        String url = newPasswordURL;
        ResponseEntity<Map>response = loginTemplate.postForEntity(url, passwordRequest, Map.class);
        if(response.getStatusCodeValue() != 200)
        {
            throw new HttpClientErrorException(response.getStatusCode());
        }
    }

    /**
     * Validate token for new password.
     * @param token The generated token to be validated.
     */
    public void validatePasswordToken(String token){
        String url = validatePasswordTokenURL;
        ResponseEntity<Map>response = loginTemplate.postForEntity(url, token, Map.class);
        if(response.getStatusCodeValue() != 200)
        {
            throw new HttpClientErrorException(response.getStatusCode());
        }
    }

    /**
     * Update the applicants password.
     * @param token The token corresponding to the applicant.
     * @param password The new password to be set.
     */
    public void updatePassword(String token, String password){
        String url = updatePasswordTokenURL;
        UpdatePasswordRequest updatePasswordRequest = new UpdatePasswordRequest();
        updatePasswordRequest.setPassword(password);
        updatePasswordRequest.setToken(token);
        ResponseEntity<Map>response = loginTemplate.postForEntity(url, updatePasswordRequest, Map.class);
        if(response.getStatusCodeValue() != 200)
        {
            throw new HttpClientErrorException(response.getStatusCode());
        }
    }

    /**
     * Service method to find client by userToken
     * On success : True, if user was found. False, if user was not found.
     * On failure : False, if user was null.
     * */
    public boolean clientExists(String clientId){
        if(Objects.isNull(clientId)){
            return false;
        }
        return clientRepository.exists(clientId);
    }
}
